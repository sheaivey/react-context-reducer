{"version":3,"file":"main.c130c3f580fb3df98531.bundle.js","sources":["webpack:///./src/contextReducer/combineReducers.js"],"sourcesContent":["import { warning, msg } from '../utils/logging';\n\n// modified combineReducers from Redux: https://github.com/reduxjs/redux/blob/master/src/combineReducers.js\nconst combineReducers = (reducers) => {\n  const reducerKeys = Object.keys(reducers);\n  const finalReducers = {};\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i];\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(`No reducer provided for key \"${key}\"`);\n      }\n    }\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        warning(`The reducer provided for key \"${key}\" is not a function.`);\n      }\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers);\n\n  return (state = {}, action) => {\n    let hasChanged = false;\n    const nextState = {};\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i];\n      const reducer = finalReducers[key];\n      const previousStateForKey = state[key];\n      const nextStateForKey = reducer(previousStateForKey, action, key);\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof nextStateForKey === 'undefined') {\n          throw new Error(msg('reducers should always return a state other then \"undefined\"'));\n        }\n      }\n      nextState[key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    return hasChanged ? nextState : state;\n  };\n};\n\nexport default combineReducers;\n"],"mappings":"AA2CA","sourceRoot":""}